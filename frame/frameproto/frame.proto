syntax = "proto3";
option go_package = "github.com/0x00b/gobbq/frame/frameproto;frameproto";
package frameproto;

import "bbq.proto";
import "google/protobuf/empty.proto";
 
 
service FrameSever {
	option (bbq.service_type) = Entity;

	rpc Heartbeat(HeartbeatReq) returns(google.protobuf.Empty) {}

	rpc Init(InitReq) returns(InitRsp) {}
	rpc Join(JoinReq) returns(JoinRsp) {}
	rpc Progress(ProgressReq) returns(ProgressRsp) {}
	rpc Ready(ReadyReq) returns(google.protobuf.Empty) {}
	rpc Move(MoveReq) returns(google.protobuf.Empty) {} //可以针对性优化，所以独立出来一个协议
	rpc Input(InputReq) returns(google.protobuf.Empty) {}
	rpc Result(ResultReq) returns(google.protobuf.Empty) {}
}
 
service FrameClient {
	option (bbq.service_type) = Entity;

	rpc Start(StartReq) returns(google.protobuf.Empty) {}
	rpc Frame(FrameReq) returns(google.protobuf.Empty) {}
	rpc Result(ClientResultReq) returns(google.protobuf.Empty) {}
	rpc Close(CloseReq) returns(google.protobuf.Empty) {}

}

message Position {
	int32 x = 1;
	int32 y = 2;
}

message MoveReq{
	Position Pos = 1;
}
 
message InputData{
	string Data = 1;
}
message InputReq{
	InputData Data = 1;
}

message FrameData {
	uint64 CLientID = 1;
	Position Pos = 2;
	repeated InputData Data = 3;
}

message FrameReq {
	repeated FrameData Data = 1;
}

message HeartbeatReq{
}

message InitReq{
	int32 ClientNum = 1;

}

message InitRsp{
}

message JoinReq{
}

message JoinRsp{
}

message ProgressReq{
}

message ProgressRsp{
}

message ReadyReq{
}

message ResultReq{
}

message StartReq {

}

message ClientResultReq {
	
}

message CloseReq {
	
}