syntax = "proto3";
option go_package = "github.com/0x00b/gobbq;bbqpb";
package bbqpb;

//protoc --go_out=paths=source_relative:. bbq.proto

enum ContentType {
	proto = 0;
}

enum CompressType {
	gzip = 0;
}

// 请求协议头
message RequestHeader {
	// 协议版本
	// 具体值与Version对应
	uint32  Version  =1;  
	// 具体值与CallType对应
 	// 请求唯一id
	 uint32 RequestId =2; 
	// 请求的超时时间，单位ms
	uint32 Timeout =3;  
	// 调用服务的接口名
	// 规范格式: /package.Service名称/接口名
	string Method=4; 
 	// 框架透传的信息key-value对，目前分两部分
	// 1是框架层要透传的信息，key的名字要以-开头
	// 2是业务层要透传的信息，业务可以自行设置
	map <string, bytes> TransInfo =5;
	// 请求数据的序列化类型
	// 比如: proto/jce/json, 默认proto
	// 具体值与ContentEncodeType对应
	uint32 ContentType = 6;
	// 请求数据使用的压缩方式
	// 比如: gzip/snappy/..., 默认不使用
	// 具体值与CompressType对应
	uint32 CompressType= 7;
}

// 返回协议头
message ResponseHeader {
	// 协议版本
	// 具体值与Version对应
	uint32  Version  =1;  
	// 具体值与CallType对应
 	// 请求唯一id
	 uint32 RequestId =2; 
	// 请求的超时时间，单位ms
	uint32 Timeout =3;  
	// 调用服务的接口名
	// 规范格式: /package.Service名称/接口名
	string Method=4; 
 	// 框架透传的信息key-value对，目前分两部分
	// 1是框架层要透传的信息，key的名字要以-开头
	// 2是业务层要透传的信息，业务可以自行设置
	map <string, bytes> TransInfo =5;
	// 请求数据的序列化类型
	// 比如: proto/jce/json, 默认proto
	// 具体值与ContentEncodeType对应
	uint32 ContentType = 6;
	// 请求数据使用的压缩方式
	// 比如: gzip/snappy/..., 默认不使用
	// 具体值与CompressType对应
	uint32 CompressType= 7;
	uint32 RetCode = 8;
	uint32 MethodErrCode = 9;
	string MethodErrMsg = 10;
}