syntax = "proto3";
option go_package = "git.code.oa.com/git.code.oa.com/edu-training/op/api/proto";
import "google/api/annotations.proto";
import "common.proto";

// 查询机构列表
message FooReq {
  message Request { 
    string name = 1; 
    string passwd = 2; 
  }
  message Result {
    string playerid = 1;
  }
}

// define a entity
service Player {
  //option
  // name
  // passwd

  rpc Foo(FooReq.Request) returns (FooReq.Result) {
    //option cs
    //option sc
    //option ss
  }
}

// for option cs
//  server need impeliment:
//    func(Player)Foo(Context, FooReq.Request) (FooReq.Result, error)
//  client call:
//    func(Player)Foo(Context, FooReq.Request, ...callback(Context, FooReq.Result)) error


// for option sc
//  server call:
//    func(Player)Foo(Context, FooReq.Request, ...callback(Context, FooReq.Result)) error
//  client:
//    func(Player)Foo(callback(Context, FooReq.Request) (FooReq.Result, error))

// for option ss
//  local need impeliment:
//    func(Player)Foo(Context, FooReq.Request) (FooReq.Result, error)
//  remote call:
//    func(Player)Foo(Context, FooReq.Request, ...callback(Context, FooReq.Result)) error

// no response , no callback
// Context{playerid, traceid, ...}
// playerid <=call bind=> clientid <=auto bind=> socket.conn
// playerid is bussiness id, clientid is auto generte for socket.conn

// call client need playerid or clientid, otherwise it is error
// can new context for playerid

// 自建dns，实现自己的负载均衡，类似dirsvr