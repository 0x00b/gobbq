syntax = "proto3";
option go_package = "github.com/0x00b/gobbq/proto/bbq;bbq";
package bbq;

// for options
import "google/protobuf/descriptor.proto";

//protoc --go_out=paths=source_relative:. bbq.proto

enum ContentType {
	Proto = 0;
}

enum CompressType {
	None = 0;
	Gzip = 1;
}

enum RequestType {
	RequestRequest = 0;
	RequestRespone = 1;
}
enum CallType {
	Unary  = 0;
	OneWay = 1;
}

enum ServiceType {
	// 请求entity，需要提供entity id， entity是有ID的service, entity可以创建很多
	Entity= 0;
	// 请求service，只需要提供完整接口名，service是单例entity，只能有一个
	Service = 1;
}

// 使用string，方便作为key等
// message EntityID {
// 	// 记录Entity所在的proxy
// 	string ProxyID = 1;
// 	// proxy上记录有哪些InstID
// 	string InstID = 2;
// 	// 具体的Entity在Inst上
// 	string ID = 3;
// }

// 请求协议头
message Header {
	// 协议版本
	uint32  Version = 1;  
 	// 请求唯一id
	string RequestId = 2; 
	// 请求的超时时间，单位ms
	uint32 Timeout = 3;
	// 是请求包，还是返回包
	RequestType RequestType = 4;
	// sverice or entity
	ServiceType ServiceType = 5; 
	// Unary or OneWay, OneWay no response, just notify
	CallType CallType = 6;
	// 调用的原EntityID
	uint64 SrcEntity = 7;
	// 调用的目的EntityID
	uint64 DstEntity  = 8;
	// 规范格式: 类名，服务名
	string Type = 9;
	// 规范格式: 接口名
	string Method = 10;
	// 请求数据的序列化类型
	// 比如: proto/jce/json, 默认proto
	// 具体值与ContentEncodeType对应
	ContentType ContentType = 11;
	// 请求数据使用的压缩方式
	// 比如: gzip/snappy/..., 默认不使用
	// 具体值与CompressType对应
	CompressType CompressType = 12;
	// 是否检查包是否正确
	uint32  Flags = 13;
	// 附加信息
	map <string, bytes> TransInfo = 14;
	// 返回值
	int32   ErrCode = 15;
	string  ErrMsg  = 16;
}

// ===========options===========

enum MySQL {
	MYSQL_FIELD = 0;		// 普通db字段
	MYSQL_NONE = 1; 		// 非db字段，不持久化，其他类型都是db字段，持久化存储
	MYSQL_PRIMARY_KEY = 2;	// 主键
	MYSQL_UNIQUE = 3;		// 唯一索引
	MYSQL_INDEX = 4;		// 普通索引
}

// mongodb
enum MONGO {
	MGO_FIELD = 0;		// 普通db字段
	MGO_NONE = 1; 		// 非db字段，不持久化，其他类型都是db字段，持久化存储
	MGO_ID = 2;			// 主键
}

message Field {
	// 自定义tag，可以自己针对不同的tag实现不同的逻辑
	string tag = 1;
	// mysql
	MySQL mysql = 2;
	// mongo
	MONGO mgo = 3;
}

// message FooOptions {
// 	int32 opt1 = 1;
// 	string opt2 = 2;
// }

extend google.protobuf.FieldOptions {
	// FooOptions foo_options = 1234;
	Field field = 1100;
}

// // usage:
// message Bar {
// 	int32 a = 1 [(foo_options).opt1 = 123, (foo_options).opt2 = "baz"];
// 	// alternative aggregate syntax (uses TextFormat):
// 	int32 b = 2 [(foo_options) = { opt1: 123 opt2: "baz" }];
// }

// extend google.protobuf.MessageOptions {
// 	string primary_key = 51234;
// }

// usage
// message MyMessage {
//   option (type) = "service";
// }

// extend google.protobuf.MethodOptions {
// 	MethodType method_type = 50001;
// }

extend google.protobuf.ServiceOptions {
	ServiceType service_type = 50100;
}

// usage
// service MyService {
// 	option (call_type) = CallEntity;
// 	rpc MyMethod(RequestType) returns(ResponseType) {
// 	}
// }